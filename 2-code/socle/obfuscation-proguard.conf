####################################################################
# Configuration de l'obfuscation du code présent dans les JARs
#
# Principe : remplacement des noms de classes et de méthodes par des
#   a, b, c pour compliquer la compréhension du code décompiler
#
# Documentation : https://www.guardsquare.com/manual/configuration/usage
#
# Attention, si vous utilisez JavaDecompiler (https://github.com/java-decompiler/jd-gui),
#  au bug https://github.com/java-decompiler/jd-gui/issues/144. Même en désactivant
#  la fonctionnalité liée à Maven, le cache reste et la modification d'un JAR n'est
#  jamais prise en compte. Outil à fuir !
# Pour tester, il est plus simple de surveiller le proguard_map.txt.
#
####################################################################

#
# CONFIGURATION MINIMALE SYSTEMATIQUE
#

# Par défaut, Guard supprime tout ce qui n'est pas dans les -keep*
-dontshrink

# Modification du code en fusionnant des lignes voire des classes et supprimant le code inutilisé visiblement (pb avec Jackson notamment)
-dontoptimize

# Pour les versions de Java suppérieures à 9, il faut fournir les classes de bases du JDK non chargées par défaut
#  Avant elles étaient présentes dans rt.jar. Maintenant elles sont à charger à partir des modules
#  Pour trouver, à partir de la classe, le module à charger :
#    Module m = SAXParser.class.getModule();
#    System.out.println(m.getLayer().configuration().findModule(m.getName()).flatMap(rm -> rm.reference().location()).orElse(null));
-libraryjars <java.home>/jmods/java.base.jmod(!**.jar;!module-info.class)
-libraryjars <java.home>/jmods/java.sql.jmod (!**.jar;!module-info.class)
-libraryjars <java.home>/jmods/java.xml.jmod (!**.jar;!module-info.class)
-libraryjars <java.home>/jmods/java.scripting.jmod (!**.jar;!module-info.class)
-libraryjars <java.home>/jmods/java.net.http.jmod (!**.jar;!module-info.class)
-libraryjars <java.home>/jmods/java.naming.jmod (!**.jar;!module-info.class)

# Pour ne rien offusquer du tout et avoir des JARs en clair
#   Le -keep Toto est nécessaire car il doit au minimum exister un keep)
#   Reste à commenter tout le reste qui suit
#-dontobfuscate
#-keep public class Toto { *; }

# Pour tout conserver sans rien offusquer et avoir des JARs en clair mais sans désactiver l'obfuscation.
#   (attention, ProGuard réalise quand même des modifications de bytecode)
#-keep public class * { *; }

#
# CONFIGURATION DE L'OBFUSCATION
#

# Tous les avertissements sont à traiter ! Toujours !
#   Sauf PersistenceCreator sans explication précise
#   Sauf Velocity qui est utilisé en "scope COMPILE" dans COMMUN mais n'est pas disponible en dépendance dans la plus part des micro-services
-dontnote
-dontwarn org.springframework.data.annotation.PersistenceCreator
-dontwarn org.apache.velocity.**

# Ne jamais mettre pour casser le build en cas de warning
#-ignorewarnings

# Pour conserver tous les attributs associés au code comme les annotations (@see https://www.guardsquare.com/manual/configuration/attributes)
-keepattributes Exceptions,InnerClasses,Signature,*Annotation*,MethodParameters,EnclosingMethod,RuntimeVisibleAnnotations,Record,SourceFile,LineNumberTable

# Pour conserver tous les constructeurs à l'identique (pb dans MongoDB)
-keepclassmembers class *  { <init>(...); }

# Pour garder la classe de démarrage
-keepclasseswithmembers public class * { public static void main(java.lang.String[]);}

# Pour conserver le nom de la classe et le nom des méthodes @Bean pour ne pas générer des composants avec un nom "a", "b" ou "c"
-keep class * { @org.springframework.context.annotation.Bean *; }

# Pour conserver le nom de la classe (mais pas les noms de méthodes car non demandé entre {}) et permettre à Spring de démarrer car tous les noms de composant, sans ça, sont "a", "b" ou "c"
-keep interface *
-keep @org.springframework.stereotype.Service class *
-keep @org.springframework.stereotype.Component class *
-keep @org.springframework.web.bind.annotation.ControllerAdvice class *
-keep @org.springframework.cloud.openfeign.FeignClient class *

# Pour conserver, dans les APIs exposées par les micro-services et dans les clients d'appels externes, :
#   conserver les noms des paramètres de méthodes des APIs car en lien avec le nom de chaque donnée envoyée dans une requête POST.
#   conserver les noms des membres des classes DTO pour lire et récupérer correctement les contenus JSON envoyés ou reçus.
-keepclassmembers class **.apiclient.api.* {*;}
-keepclassmembers class **.apiclient.dto**.* {*;}
-keepclassmembers class **.client.dto**.* {*;}
-keepclassmembers class **.adminpsl.dto**.* {*;}

